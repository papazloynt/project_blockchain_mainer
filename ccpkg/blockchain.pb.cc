// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#include "blockchain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_blockchain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStruct_blockchain_2eproto;
namespace blockchain {
class TransactionStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStruct> _instance;
} _TransactionStruct_default_instance_;
class TransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionRequest> _instance;
} _TransactionRequest_default_instance_;
class TransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionResponse> _instance;
} _TransactionResponse_default_instance_;
}  // namespace blockchain
static void InitDefaultsscc_info_TransactionRequest_blockchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blockchain::_TransactionRequest_default_instance_;
    new (ptr) ::blockchain::TransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blockchain::TransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionRequest_blockchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionRequest_blockchain_2eproto}, {
      &scc_info_TransactionStruct_blockchain_2eproto.base,}};

static void InitDefaultsscc_info_TransactionResponse_blockchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blockchain::_TransactionResponse_default_instance_;
    new (ptr) ::blockchain::TransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blockchain::TransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionResponse_blockchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionResponse_blockchain_2eproto}, {}};

static void InitDefaultsscc_info_TransactionStruct_blockchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blockchain::_TransactionStruct_default_instance_;
    new (ptr) ::blockchain::TransactionStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blockchain::TransactionStruct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStruct_blockchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionStruct_blockchain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blockchain_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_blockchain_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blockchain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_blockchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionStruct, client_from_),
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionStruct, client_to_),
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionStruct, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionRequest, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::TransactionResponse, answer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blockchain::TransactionStruct)},
  { 8, -1, sizeof(::blockchain::TransactionRequest)},
  { 14, -1, sizeof(::blockchain::TransactionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::_TransactionStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::_TransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::_TransactionResponse_default_instance_),
};

const char descriptor_table_protodef_blockchain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020blockchain.proto\022\nblockchain\032\034google/a"
  "pi/annotations.proto\"H\n\021TransactionStruc"
  "t\022\023\n\013client_from\030\001 \001(\t\022\021\n\tclient_to\030\002 \001("
  "\t\022\013\n\003sum\030\003 \001(\r\"@\n\022TransactionRequest\022*\n\003"
  "req\030\001 \001(\0132\035.blockchain.TransactionStruct"
  "\"%\n\023TransactionResponse\022\016\n\006answer\030\001 \001(\t2"
  "w\n\nBlockchain\022i\n\013Transaction\022\036.blockchai"
  "n.TransactionRequest\032\037.blockchain.Transa"
  "ctionResponse\"\031\202\323\344\223\002\023\"\016/v1/blockchain:\001*"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_blockchain_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_blockchain_2eproto_sccs[3] = {
  &scc_info_TransactionRequest_blockchain_2eproto.base,
  &scc_info_TransactionResponse_blockchain_2eproto.base,
  &scc_info_TransactionStruct_blockchain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blockchain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto = {
  false, false, descriptor_table_protodef_blockchain_2eproto, "blockchain.proto", 368,
  &descriptor_table_blockchain_2eproto_once, descriptor_table_blockchain_2eproto_sccs, descriptor_table_blockchain_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_blockchain_2eproto::offsets,
  file_level_metadata_blockchain_2eproto, 3, file_level_enum_descriptors_blockchain_2eproto, file_level_service_descriptors_blockchain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_blockchain_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_blockchain_2eproto)), true);
namespace blockchain {

// ===================================================================

void TransactionStruct::InitAsDefaultInstance() {
}
class TransactionStruct::_Internal {
 public:
};

TransactionStruct::TransactionStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blockchain.TransactionStruct)
}
TransactionStruct::TransactionStruct(const TransactionStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_from().empty()) {
    client_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_from(),
      GetArena());
  }
  client_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_to().empty()) {
    client_to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_to(),
      GetArena());
  }
  sum_ = from.sum_;
  // @@protoc_insertion_point(copy_constructor:blockchain.TransactionStruct)
}

void TransactionStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionStruct_blockchain_2eproto.base);
  client_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sum_ = 0u;
}

TransactionStruct::~TransactionStruct() {
  // @@protoc_insertion_point(destructor:blockchain.TransactionStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionStruct::ArenaDtor(void* object) {
  TransactionStruct* _this = reinterpret_cast< TransactionStruct* >(object);
  (void)_this;
}
void TransactionStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStruct& TransactionStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionStruct_blockchain_2eproto.base);
  return *internal_default_instance();
}


void TransactionStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.TransactionStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.TransactionStruct.client_from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.TransactionStruct.client_to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.TransactionStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_from = 1;
  if (this->client_from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_from().data(), static_cast<int>(this->_internal_client_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.TransactionStruct.client_from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_from(), target);
  }

  // string client_to = 2;
  if (this->client_to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_to().data(), static_cast<int>(this->_internal_client_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.TransactionStruct.client_to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_to(), target);
  }

  // uint32 sum = 3;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.TransactionStruct)
  return target;
}

size_t TransactionStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.TransactionStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_from = 1;
  if (this->client_from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_from());
  }

  // string client_to = 2;
  if (this->client_to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_to());
  }

  // uint32 sum = 3;
  if (this->sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockchain.TransactionStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockchain.TransactionStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockchain.TransactionStruct)
    MergeFrom(*source);
  }
}

void TransactionStruct::MergeFrom(const TransactionStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.TransactionStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_from().size() > 0) {
    _internal_set_client_from(from._internal_client_from());
  }
  if (from.client_to().size() > 0) {
    _internal_set_client_to(from._internal_client_to());
  }
  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
}

void TransactionStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockchain.TransactionStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStruct::CopyFrom(const TransactionStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.TransactionStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStruct::IsInitialized() const {
  return true;
}

void TransactionStruct::InternalSwap(TransactionStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_from_.Swap(&other->client_from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_to_.Swap(&other->client_to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sum_, other->sum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionRequest::InitAsDefaultInstance() {
  ::blockchain::_TransactionRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::blockchain::TransactionStruct*>(
      ::blockchain::TransactionStruct::internal_default_instance());
}
class TransactionRequest::_Internal {
 public:
  static const ::blockchain::TransactionStruct& req(const TransactionRequest* msg);
};

const ::blockchain::TransactionStruct&
TransactionRequest::_Internal::req(const TransactionRequest* msg) {
  return *msg->req_;
}
TransactionRequest::TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blockchain.TransactionRequest)
}
TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::blockchain::TransactionStruct(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.TransactionRequest)
}

void TransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionRequest_blockchain_2eproto.base);
  req_ = nullptr;
}

TransactionRequest::~TransactionRequest() {
  // @@protoc_insertion_point(destructor:blockchain.TransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void TransactionRequest::ArenaDtor(void* object) {
  TransactionRequest* _this = reinterpret_cast< TransactionRequest* >(object);
  (void)_this;
}
void TransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRequest& TransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionRequest_blockchain_2eproto.base);
  return *internal_default_instance();
}


void TransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.TransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .blockchain.TransactionStruct req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.TransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.TransactionStruct req = 1;
  if (this->has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.TransactionRequest)
  return target;
}

size_t TransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.TransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.TransactionStruct req = 1;
  if (this->has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockchain.TransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockchain.TransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockchain.TransactionRequest)
    MergeFrom(*source);
  }
}

void TransactionRequest::MergeFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.TransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_req()) {
    _internal_mutable_req()->::blockchain::TransactionStruct::MergeFrom(from._internal_req());
  }
}

void TransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockchain.TransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.TransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {
  return true;
}

void TransactionRequest::InternalSwap(TransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionResponse::InitAsDefaultInstance() {
}
class TransactionResponse::_Internal {
 public:
};

TransactionResponse::TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:blockchain.TransactionResponse)
}
TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_answer().empty()) {
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_answer(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.TransactionResponse)
}

void TransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionResponse_blockchain_2eproto.base);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:blockchain.TransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionResponse::ArenaDtor(void* object) {
  TransactionResponse* _this = reinterpret_cast< TransactionResponse* >(object);
  (void)_this;
}
void TransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionResponse& TransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionResponse_blockchain_2eproto.base);
  return *internal_default_instance();
}


void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.TransactionResponse.answer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.TransactionResponse.answer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.TransactionResponse)
  return target;
}

size_t TransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.TransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_answer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockchain.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockchain.TransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockchain.TransactionResponse)
    MergeFrom(*source);
  }
}

void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {
    _internal_set_answer(from._internal_answer());
  }
}

void TransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockchain.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {
  return true;
}

void TransactionResponse::InternalSwap(TransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  answer_.Swap(&other->answer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blockchain::TransactionStruct* Arena::CreateMaybeMessage< ::blockchain::TransactionStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::TransactionStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::TransactionRequest* Arena::CreateMaybeMessage< ::blockchain::TransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::TransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::TransactionResponse* Arena::CreateMaybeMessage< ::blockchain::TransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::TransactionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
