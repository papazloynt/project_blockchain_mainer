// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto;
namespace blockchain {
class TransactionRequest;
class TransactionRequestDefaultTypeInternal;
extern TransactionRequestDefaultTypeInternal _TransactionRequest_default_instance_;
class TransactionResponse;
class TransactionResponseDefaultTypeInternal;
extern TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
class TransactionStruct;
class TransactionStructDefaultTypeInternal;
extern TransactionStructDefaultTypeInternal _TransactionStruct_default_instance_;
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::TransactionRequest* Arena::CreateMaybeMessage<::blockchain::TransactionRequest>(Arena*);
template<> ::blockchain::TransactionResponse* Arena::CreateMaybeMessage<::blockchain::TransactionResponse>(Arena*);
template<> ::blockchain::TransactionStruct* Arena::CreateMaybeMessage<::blockchain::TransactionStruct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {

// ===================================================================

class TransactionStruct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.TransactionStruct) */ {
 public:
  inline TransactionStruct() : TransactionStruct(nullptr) {};
  virtual ~TransactionStruct();

  TransactionStruct(const TransactionStruct& from);
  TransactionStruct(TransactionStruct&& from) noexcept
    : TransactionStruct() {
    *this = ::std::move(from);
  }

  inline TransactionStruct& operator=(const TransactionStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionStruct& operator=(TransactionStruct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionStruct* internal_default_instance() {
    return reinterpret_cast<const TransactionStruct*>(
               &_TransactionStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionStruct& a, TransactionStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionStruct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionStruct* New() const final {
    return CreateMaybeMessage<TransactionStruct>(nullptr);
  }

  TransactionStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionStruct& from);
  void MergeFrom(const TransactionStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.TransactionStruct";
  }
  protected:
  explicit TransactionStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_blockchain_2eproto);
    return ::descriptor_table_blockchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFromFieldNumber = 1,
    kClientToFieldNumber = 2,
    kSumFieldNumber = 3,
  };
  // string client_from = 1;
  void clear_client_from();
  const std::string& client_from() const;
  void set_client_from(const std::string& value);
  void set_client_from(std::string&& value);
  void set_client_from(const char* value);
  void set_client_from(const char* value, size_t size);
  std::string* mutable_client_from();
  std::string* release_client_from();
  void set_allocated_client_from(std::string* client_from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_from(
      std::string* client_from);
  private:
  const std::string& _internal_client_from() const;
  void _internal_set_client_from(const std::string& value);
  std::string* _internal_mutable_client_from();
  public:

  // string client_to = 2;
  void clear_client_to();
  const std::string& client_to() const;
  void set_client_to(const std::string& value);
  void set_client_to(std::string&& value);
  void set_client_to(const char* value);
  void set_client_to(const char* value, size_t size);
  std::string* mutable_client_to();
  std::string* release_client_to();
  void set_allocated_client_to(std::string* client_to);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_to();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_to(
      std::string* client_to);
  private:
  const std::string& _internal_client_to() const;
  void _internal_set_client_to(const std::string& value);
  std::string* _internal_mutable_client_to();
  public:

  // uint32 sum = 3;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::uint32 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sum() const;
  void _internal_set_sum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.TransactionStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_to_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class TransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.TransactionRequest) */ {
 public:
  inline TransactionRequest() : TransactionRequest(nullptr) {};
  virtual ~TransactionRequest();

  TransactionRequest(const TransactionRequest& from);
  TransactionRequest(TransactionRequest&& from) noexcept
    : TransactionRequest() {
    *this = ::std::move(from);
  }

  inline TransactionRequest& operator=(const TransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRequest& operator=(TransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionRequest*>(
               &_TransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionRequest& a, TransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionRequest* New() const final {
    return CreateMaybeMessage<TransactionRequest>(nullptr);
  }

  TransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionRequest& from);
  void MergeFrom(const TransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.TransactionRequest";
  }
  protected:
  explicit TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_blockchain_2eproto);
    return ::descriptor_table_blockchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // .blockchain.TransactionStruct req = 1;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::blockchain::TransactionStruct& req() const;
  ::blockchain::TransactionStruct* release_req();
  ::blockchain::TransactionStruct* mutable_req();
  void set_allocated_req(::blockchain::TransactionStruct* req);
  private:
  const ::blockchain::TransactionStruct& _internal_req() const;
  ::blockchain::TransactionStruct* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::blockchain::TransactionStruct* req);
  ::blockchain::TransactionStruct* unsafe_arena_release_req();

  // @@protoc_insertion_point(class_scope:blockchain.TransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::TransactionStruct* req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class TransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.TransactionResponse) */ {
 public:
  inline TransactionResponse() : TransactionResponse(nullptr) {};
  virtual ~TransactionResponse();

  TransactionResponse(const TransactionResponse& from);
  TransactionResponse(TransactionResponse&& from) noexcept
    : TransactionResponse() {
    *this = ::std::move(from);
  }

  inline TransactionResponse& operator=(const TransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionResponse& operator=(TransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionResponse* internal_default_instance() {
    return reinterpret_cast<const TransactionResponse*>(
               &_TransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionResponse& a, TransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionResponse* New() const final {
    return CreateMaybeMessage<TransactionResponse>(nullptr);
  }

  TransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionResponse& from);
  void MergeFrom(const TransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.TransactionResponse";
  }
  protected:
  explicit TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_blockchain_2eproto);
    return ::descriptor_table_blockchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  void set_answer(const std::string& value);
  void set_answer(std::string&& value);
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  std::string* mutable_answer();
  std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_answer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_answer(
      std::string* answer);
  private:
  const std::string& _internal_answer() const;
  void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.TransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionStruct

// string client_from = 1;
inline void TransactionStruct::clear_client_from() {
  client_from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionStruct::client_from() const {
  // @@protoc_insertion_point(field_get:blockchain.TransactionStruct.client_from)
  return _internal_client_from();
}
inline void TransactionStruct::set_client_from(const std::string& value) {
  _internal_set_client_from(value);
  // @@protoc_insertion_point(field_set:blockchain.TransactionStruct.client_from)
}
inline std::string* TransactionStruct::mutable_client_from() {
  // @@protoc_insertion_point(field_mutable:blockchain.TransactionStruct.client_from)
  return _internal_mutable_client_from();
}
inline const std::string& TransactionStruct::_internal_client_from() const {
  return client_from_.Get();
}
inline void TransactionStruct::_internal_set_client_from(const std::string& value) {
  
  client_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionStruct::set_client_from(std::string&& value) {
  
  client_from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blockchain.TransactionStruct.client_from)
}
inline void TransactionStruct::set_client_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blockchain.TransactionStruct.client_from)
}
inline void TransactionStruct::set_client_from(const char* value,
    size_t size) {
  
  client_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blockchain.TransactionStruct.client_from)
}
inline std::string* TransactionStruct::_internal_mutable_client_from() {
  
  return client_from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionStruct::release_client_from() {
  // @@protoc_insertion_point(field_release:blockchain.TransactionStruct.client_from)
  return client_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionStruct::set_allocated_client_from(std::string* client_from) {
  if (client_from != nullptr) {
    
  } else {
    
  }
  client_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blockchain.TransactionStruct.client_from)
}
inline std::string* TransactionStruct::unsafe_arena_release_client_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blockchain.TransactionStruct.client_from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionStruct::unsafe_arena_set_allocated_client_from(
    std::string* client_from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_from != nullptr) {
    
  } else {
    
  }
  client_from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.TransactionStruct.client_from)
}

// string client_to = 2;
inline void TransactionStruct::clear_client_to() {
  client_to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionStruct::client_to() const {
  // @@protoc_insertion_point(field_get:blockchain.TransactionStruct.client_to)
  return _internal_client_to();
}
inline void TransactionStruct::set_client_to(const std::string& value) {
  _internal_set_client_to(value);
  // @@protoc_insertion_point(field_set:blockchain.TransactionStruct.client_to)
}
inline std::string* TransactionStruct::mutable_client_to() {
  // @@protoc_insertion_point(field_mutable:blockchain.TransactionStruct.client_to)
  return _internal_mutable_client_to();
}
inline const std::string& TransactionStruct::_internal_client_to() const {
  return client_to_.Get();
}
inline void TransactionStruct::_internal_set_client_to(const std::string& value) {
  
  client_to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionStruct::set_client_to(std::string&& value) {
  
  client_to_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blockchain.TransactionStruct.client_to)
}
inline void TransactionStruct::set_client_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blockchain.TransactionStruct.client_to)
}
inline void TransactionStruct::set_client_to(const char* value,
    size_t size) {
  
  client_to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blockchain.TransactionStruct.client_to)
}
inline std::string* TransactionStruct::_internal_mutable_client_to() {
  
  return client_to_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionStruct::release_client_to() {
  // @@protoc_insertion_point(field_release:blockchain.TransactionStruct.client_to)
  return client_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionStruct::set_allocated_client_to(std::string* client_to) {
  if (client_to != nullptr) {
    
  } else {
    
  }
  client_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blockchain.TransactionStruct.client_to)
}
inline std::string* TransactionStruct::unsafe_arena_release_client_to() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blockchain.TransactionStruct.client_to)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_to_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionStruct::unsafe_arena_set_allocated_client_to(
    std::string* client_to) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_to != nullptr) {
    
  } else {
    
  }
  client_to_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_to, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.TransactionStruct.client_to)
}

// uint32 sum = 3;
inline void TransactionStruct::clear_sum() {
  sum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionStruct::_internal_sum() const {
  return sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionStruct::sum() const {
  // @@protoc_insertion_point(field_get:blockchain.TransactionStruct.sum)
  return _internal_sum();
}
inline void TransactionStruct::_internal_set_sum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sum_ = value;
}
inline void TransactionStruct::set_sum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:blockchain.TransactionStruct.sum)
}

// -------------------------------------------------------------------

// TransactionRequest

// .blockchain.TransactionStruct req = 1;
inline bool TransactionRequest::_internal_has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline bool TransactionRequest::has_req() const {
  return _internal_has_req();
}
inline void TransactionRequest::clear_req() {
  if (GetArena() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
inline const ::blockchain::TransactionStruct& TransactionRequest::_internal_req() const {
  const ::blockchain::TransactionStruct* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::blockchain::TransactionStruct*>(
      &::blockchain::_TransactionStruct_default_instance_);
}
inline const ::blockchain::TransactionStruct& TransactionRequest::req() const {
  // @@protoc_insertion_point(field_get:blockchain.TransactionRequest.req)
  return _internal_req();
}
inline void TransactionRequest::unsafe_arena_set_allocated_req(
    ::blockchain::TransactionStruct* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.TransactionRequest.req)
}
inline ::blockchain::TransactionStruct* TransactionRequest::release_req() {
  auto temp = unsafe_arena_release_req();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blockchain::TransactionStruct* TransactionRequest::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:blockchain.TransactionRequest.req)
  
  ::blockchain::TransactionStruct* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::blockchain::TransactionStruct* TransactionRequest::_internal_mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::TransactionStruct>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::blockchain::TransactionStruct* TransactionRequest::mutable_req() {
  // @@protoc_insertion_point(field_mutable:blockchain.TransactionRequest.req)
  return _internal_mutable_req();
}
inline void TransactionRequest::set_allocated_req(::blockchain::TransactionStruct* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:blockchain.TransactionRequest.req)
}

// -------------------------------------------------------------------

// TransactionResponse

// string answer = 1;
inline void TransactionResponse::clear_answer() {
  answer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionResponse::answer() const {
  // @@protoc_insertion_point(field_get:blockchain.TransactionResponse.answer)
  return _internal_answer();
}
inline void TransactionResponse::set_answer(const std::string& value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:blockchain.TransactionResponse.answer)
}
inline std::string* TransactionResponse::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:blockchain.TransactionResponse.answer)
  return _internal_mutable_answer();
}
inline const std::string& TransactionResponse::_internal_answer() const {
  return answer_.Get();
}
inline void TransactionResponse::_internal_set_answer(const std::string& value) {
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionResponse::set_answer(std::string&& value) {
  
  answer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blockchain.TransactionResponse.answer)
}
inline void TransactionResponse::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:blockchain.TransactionResponse.answer)
}
inline void TransactionResponse::set_answer(const char* value,
    size_t size) {
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blockchain.TransactionResponse.answer)
}
inline std::string* TransactionResponse::_internal_mutable_answer() {
  
  return answer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionResponse::release_answer() {
  // @@protoc_insertion_point(field_release:blockchain.TransactionResponse.answer)
  return answer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionResponse::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blockchain.TransactionResponse.answer)
}
inline std::string* TransactionResponse::unsafe_arena_release_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blockchain.TransactionResponse.answer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return answer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionResponse::unsafe_arena_set_allocated_answer(
    std::string* answer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      answer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.TransactionResponse.answer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
